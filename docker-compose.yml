# ================================================================
# Crypto Trading App - Docker Compose Configuration
# ================================================================
# Complete deployment configuration for the crypto trading application
# with support for development, testing, and production environments.

version: '3.8'

services:
  # ================================================================
  # Main Trading Application
  # ================================================================
  crypto-trader:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: crypto-trading-engine
    restart: unless-stopped
    
    # Environment variables (override in .env file)
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - PAPER_TRADING=true
    
    # Mount configuration and data volumes
    volumes:
      # Configuration (mount your actual .env file here)
      - ./.env:/app/.env:ro
      
      # Persistent data storage
      - trading-logs:/app/trading/logs
      # historical-data:/app/historical_exports  # COMMENTED OUT: Use historical data from image
      - ml-models:/app/ml_results
      - binance-data:/app/binance_exports
      
      # Optional: Mount custom configuration
      # - ./config:/app/config:ro
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 5m
      timeout: 30s
      retries: 3
      start_period: 2m
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Network configuration
    networks:
      - crypto-trading-network
    
    # Optional: Expose port for web interface (future enhancement)
    # ports:
    #   - "8080:8080"

  # ================================================================
  # Log Aggregation Service (Optional)
  # ================================================================
  log-viewer:
    image: amir20/dozzle:latest
    container_name: crypto-log-viewer
    restart: unless-stopped
    ports:
      - "9999:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DOZZLE_LEVEL=info
      - DOZZLE_TAILSIZE=300
    networks:
      - crypto-trading-network
    profiles:
      - monitoring

  # ================================================================
  # Data Backup Service (Optional)
  # ================================================================
  data-backup:
    image: alpine:latest
    container_name: crypto-data-backup
    restart: "no"
    volumes:
      - trading-logs:/data/trading-logs:ro
      - historical-data:/data/historical-data:ro
      - ml-models:/data/ml-models:ro
      - ./backups:/backups
    command: >
      sh -c "
        echo 'Creating backup at $(date)...' &&
        mkdir -p /backups/$(date +%Y%m%d_%H%M%S) &&
        cp -r /data/* /backups/$(date +%Y%m%d_%H%M%S)/ &&
        echo 'Backup completed successfully!'
      "
    networks:
      - crypto-trading-network
    profiles:
      - backup

  # ================================================================
  # Development/Debug Container (Optional)
  # ================================================================
  crypto-trader-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: application
    container_name: crypto-trading-dev
    restart: "no"
    
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=DEBUG
      - PAPER_TRADING=true
    
    volumes:
      # Mount source code for development
      - .:/app
      - trading-logs:/app/trading/logs
      - historical-data:/app/historical_exports
      - ml-models:/app/ml_results
    
    command: ["/app/start.sh", "bash"]
    stdin_open: true
    tty: true
    
    networks:
      - crypto-trading-network
    profiles:
      - development

# ================================================================
# Volume Definitions
# ================================================================
volumes:
  trading-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/trading-logs
  
  historical-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/historical-exports
  
  ml-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/ml-results
  
  binance-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/binance-exports

# ================================================================
# Network Configuration
# ================================================================
networks:
  crypto-trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
